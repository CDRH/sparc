<script>
$(document).ready(function() {
  $(window).keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
  // $(document).find('.as_replace_existing').hide();
});

function load_results(link, klass, url) {
	var params = {};
	//var f = $($(link).parents('form:first'));
	var f = $('#add-existing-'+klass+'');
	$.each($("input,textarea,select",f),function(k,v) {
		console.log('id='+v.id+', n='+v.name);
		if((v.name != null) && (v.name != '')) {
			params[v.name] = $(v).val();
		} else if(v.id != '') {
			params[v.id] = $(v).val();
		}
	})
	var subscribeRequest = $.ajax({
	     type: "POST",
	     url: url,
	     data: { search_params: params, klass: klass }
	});
	console.log(params);

	subscribeRequest.done(function(msg)
	{
		// alert($(document).find('#add-existing-link'));
		// 	    $(document).find('#add-existing-link').show();
		$('#new-search-results-'+klass+'').html(msg);
		$('#new-search-results-'+klass+' input').on('change', function() {
			$('#associated_id_selected_'+klass+'').val($(this).val());
		});
	    $(document).find('.as_replace_existing').show();
		
	});

	subscribeRequest.fail(function(jqXHR, textStatus)
	{
	     alert( "We could not subscribe you please try again or contact us if the problem persists (" + textStatus + ")." );
	});
}
</script>
<%     
	k = Object.const_get klass.singularize
	c = Object.const_get klass.pluralize+'Controller'
	kontroller = c.new
	# puts "#{kontroller.active_scaffold_config.search.columns}"
	fields = []
	begin 
		f = []
		kontroller.active_scaffold_config.field_search.columns.each {|o| f << o.name}
		fields = f
		fields.delete('ids')
		puts "========= field_search = #{f}"
	rescue => e
		puts "========= no field_search = #{e}"
		
		fields = k::SEARCH_FIELDS
		if fields == []
			fields = k.column_names 
			fields.delete('id')
			fields.delete('created_at')
			fields.delete('updated_at')
			fields.delete('created_by')
			fields.delete('updated_by')
			fields.delete('update_history')
		end
	end
	puts "----------- field = #{fields}"
%>
<input type="hidden" name="class" value="<%= klass %>">

<table id="add-existing-<%= klass %>" class="add-existing">
    <tbody>
		<% fields.each do |f| %>
		<% if kontroller.active_scaffold_config.columns[f] != nil and k.primary_key != f%>
		<% puts "'========#{f} #{kontroller.active_scaffold_config.columns[f].form_ui}"%>
			<% if kontroller.active_scaffold_config.columns[f].form_ui != :select and kontroller.active_scaffold_config.columns[f].search_ui != :record_select %>
				<tr><td><b><%= f.to_s.humanize %>: </b></td><td><input size="50" id="<%= f %>" type="text" value=""></td></tr>
			<% elsif kontroller.active_scaffold_config.columns[f].search_ui == :record_select %>
			<% puts "---- #{k} #{k.reflections[f.to_s].foreign_key}"%>
				<tr><td><b><%= f.to_s.humanize %>: </b></td><td>
					<%= 
					str = ''
					begin
						str = record_select_field f.to_s+'_id',  k.reflections[f.to_s].table_name.singularize.camelcase.constantize.new, {id: k.reflections[f.to_s].foreign_key+'_'+Random.rand(99999999).to_s, field_name: k.reflections[f.to_s].foreign_key, controller: k.reflections[f.to_s].table_name.pluralize}
					rescue => e
						 puts "=========No #{k.reflections[f.to_s].table_name.pluralize}"
						 puts e
						 str = ''
					 end
					 str
						%>
				</td></tr>
			<% elsif kontroller.active_scaffold_config.columns[f].options[:options] != nil %>
				<tr>
					<td>
						<b><%= f.to_s.humanize %>: </b>
					</td>
					<td>
						<select id="<%= f %>">
							<option></option>
							<%= options_for_select(kontroller.active_scaffold_config.columns[f].options[:options])%>
						</select>
					</td>
				</tr>
			<% end %>
		<% end %>
		<% end %>
		<tr>
			<td>
				<a href="#" onclick="load_results(this, '<%= klass %>','<%= url_for(:controller => klass.underscore.pluralize, :action => 'find_existing') %>');return false;" id="new-search" class="btn btn-default btn-xs">Search</a>
			</td>
		</tr>
    </tbody></table>
	<div id="new-search-results-<%= klass %>"></div>
