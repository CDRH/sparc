<script>
function download(link) {
	var f = jQuery(link).closest('form');
	console.log(f);
	return false;
}
jQuery(function() {
	jQuery('.submit').on('click',function(e) {
		f=jQuery(this).closest('form');
		f.attr('action',f.attr('action').replace('.xls',''));
		console.log('clear xls');
		var serializedData = $(f).serializeArray();
		 var query_str = '?';
		 // console.log(serializedData);
		 var ranges = {};
		 jQuery.each(serializedData, function(i,data){
		    if(jQuery.trim(data['value'])){
		       // query_str += (query_str == '') ? '?' + escape(data['name']) + '=' + data['value'] : '&' + escape(data['name']) + '=' + data['value'];
			   if((data['name'] != 'utf8') && !((data['name'].includes('[opt]')) || (data['name'].includes('[from]')) || (data['name'].includes('[to]')))) {
				   query_str += '&'+escape(data['name']) + '=' + escape(data['value']);
			   }
			   if((data['name'].includes('[opt]')) || (data['name'].includes('[from]')) || (data['name'].includes('[to]'))) {
				   if(data['name'].includes('[opt]')) {
					   if(ranges[data['name'].replace('[opt]','')] == null) {
						   ranges[data['name'].replace('[opt]','')] = {};
					   }
					   ranges[data['name'].replace('[opt]','')]['opt'] = data['value'];
				   }
				   if(data['name'].includes('[from]')) {
					   if(ranges[data['name'].replace('[from]','')] == null) {
						   ranges[data['name'].replace('[from]','')] = {};
					   }
					   ranges[data['name'].replace('[from]','')]['from'] = data['value'];
				   }
				   if(data['name'].includes('[to]')) {
					   if(ranges[data['name'].replace('[to]','')] == null) {
						   ranges[data['name'].replace('[to]','')] = {};
					   }
					   ranges[data['name'].replace('[to]','')]['to'] = data['value'];
				   }
			   }
		     }
		   });
  		 jQuery.each(ranges, function(i,data){
			 if(data['from'] != null) {
			   query_str += '&'+escape(i+'[from]') + '=' + escape(data['from']);
			   query_str += '&'+escape(i+'[opt]') + '=' + escape(data['opt']);
			   query_str += '&'+escape(i+'[to]') + '=' + escape(data['to']);
			 	
			 }
		 });
  		 // console.log(ranges);
            console.log(query_str);
		<% if params['adapter'] != '_list_inline_adapter' %>
			// console.log('action=<%= params['adapter'] %>')
			window.location = '<%= url_for(:action => :index) %>'+query_str;
		<% end %>
			console.log('form <%= url_for(:action => :index) %>');
			// $.ajax( {
			//       type: "POST",
			//       url: '<%= url_for(:action => :index) %>',
			// 		headers: {
			// 		        Accept : "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript; charset=utf-8",
			// 		        "Content-Type": "text/plain; charset=utf-8"
			// 		    },
			//       data: jQuery(f).serialize(),
			//       success: function( response ) {
			//         console.log( response );
			//       }
			//     } );
		jQuery.ajax({
			url: '<%= url_for(:action => :index) %>'+query_str,
			headers: {
			        Accept : "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript; charset=utf-8",
			        "Content-Type": "text/plain; charset=utf-8"
			    },
				success: function(data){
				console.log('submitted')
			}
		})
		e.preventDefault();
	});
});

</script>
<%
  url_options ||= params_for(:action => :index, :search => nil)
  submit_text ||= :search
  options = {
    :id => element_form_id(:action => 'search'),
    :class => "as_form search",
    :remote => xhr ||= request.xhr?,
    :method => :get,
    :'data-loading' => true
  }
-%>
<% if !current_user %>
		<h2><%= active_scaffold_config.list.user.label %></h2>
<% end %>
<%= form_tag url_options, options %>
  <ol class="form">
   <% visibles, hiddens = visibles_and_hiddens(active_scaffold_config.field_search) %><%# debugger %>
    <% visibles.each do |column| -%>
	<% if column %>
	<%= puts "============#{column}"%>
	<% begin %>
      <li class="form-element <%= column.css_class unless column.css_class.is_a?(Proc) %>"><%= search_attribute(column, @record) %></li>
	  <% rescue %>
	  <input type="hidden" name="search[<%= column.name %>]">
	  <% end %>
	  <% end %>
    <% end -%>
    <% unless hiddens.empty?  -%>
      <li class="sub-section">
      <% further_options_id = sub_section_id(:sub_section => 'further_options') %>
      <h5>
        <%= as_(:optional_attributes) %>
        <%= link_to_visibility_toggle(further_options_id, {:default_visible => false}) %>
      </h5>
      <ol id ="<%= further_options_id %>" class="form" style="display:none;">
      <% hiddens.each do |column| -%>
        <li class="form-element <%= column.css_class unless column.css_class.is_a?(Proc) %>"><%= search_attribute(column, @record) %></li>
      <% end -%>
      </ol>
      </li>
  <% end -%>
  </ol>
  <p class="form-footer">
    <%= submit_tag as_(submit_text), :class => "submit btn btn-default btn-sm" %>
    <%= link_to as_(:reset), url_for(url_options.merge(:search => '')), :class => 'as_cancel reset btn btn-default btn-sm reset-override', :remote => true, :data => {:refresh => true} unless local_assigns[:skip_reset] %>
	<%= link_to 'Download', '#', :onclick => "f=jQuery(this).closest('form');f.attr('action', f.attr('action').replace('.xls','')+'.xls');f.attr('data-remote', 'false');console.log(f.attr('action'));jQuery(f).submit();f.attr('action').replace('.xls','');return false;", :class => 'download btn btn-default btn-sm'%>
    <%= loading_indicator_tag(:action => :search) %>
  </p>
</form>
