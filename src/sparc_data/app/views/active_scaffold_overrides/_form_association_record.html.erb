<% record = form_association_record ||= @record %>
<script>
function cancel_edit_<%= column.name %>_<%= record.id %>(id,column) {
	console.log(id+"="+column);
	$.ajax({
		type: 'GET',
		url: '<%= url_for(:action => 'cancel_inline') %>?id='+id+'&column='+column+'&parent=<%= parent_record.class.to_s %>&parent_id='+<%= parent_record.id %>,
		success: function(data) {
			//alert(data);
			console.log($('#<%= "association-record_id_#{parent_record.id}"%>_'+column+'_'+id));
			// $('#<%= "association-record_id_#{parent_record.id}"%>_'+column+'_'+id).html(data);
			<% if record.id != 999999999999 %>
				$('#add-<%= column.name %>').html(data);
				console.log(' remove #add-<%= column.name %>');
			<% else %>
				$('#add-new-<%= column.name %>').html('');
				console.log(' remove #add-new-<%= column.name %>');
			<% end %>
			// $('#myModal .modal-body').html(data);
			// $('#myModal').modal('show');
			// console.log($('#myModal-<%= "association-record_id_#{parent_record.id}"%>_'+column+'_'+id).modal());
		}
	})
	return false;
}

function update_edit_<%= column.name %>_<%= record.id %>(id,column, element) {
	console.log(id+"="+column);
	console.log($(element).closest('tr').find('input'));
	var data = {};
	$(element).closest('tr').find('input, textarea').each(function(k,v) {
		var fields = $(v).attr('name').split(/[[\]]{1,2}/);
		if (($(v).attr('type') != 'hidden') && ($(v).attr('type') != 'checkbox') )
			data[fields[fields.length -2]] = $(v).val();
		else if ($(v).attr('type') != 'checkbox')
			data['--related--'+fields[fields.length -2]] = $(v).val();
		else {
			if (data['--related--'+fields[fields.length -2]] == null)
				data['--related--'+fields[fields.length -2]] = [];
			if ($(v).prop('checked'))
				data['--related--'+fields[fields.length -2]].push( $(v).val());
		}
				

		// console.log(fields[fields.length -2]);
	})
	console.log(data);
	$.ajax({
		type: 'POST',
		url: '<%= url_for(:action => 'update_inline') %>',
		data: {'data': data, 'id': id, 'column': column,'parent':'<%= parent_record.class.to_s %>', 'parent_id':'<%= parent_record.id %>'},
		success: function(data) {
			//alert(data);
			console.log($('#<%= "association-record_id_#{parent_record.id}"%>_'+column+'_'+id));
			// $('#<%= "association-record_id_#{parent_record.id}"%>_'+column+'_'+id).html(data);
				$('#add-<%= column.name %>').html(data);
				console.log(' remove #add-<%= column.name %>');
				$('#add-new-<%= column.name %>').html('');
				console.log(' remove #add-new-<%= column.name %>');
				// $('#myModal .modal-body').html(data);
			// $('#myModal').modal('show');
			// console.log($('#myModal-<%= "association-record_id_#{parent_record.id}"%>_'+column+'_'+id).modal());
		}
	})
	return false;
}
</script>
<%
  record_column = column
  ActiveSupport::Deprecation.warn "Relying on @record to render form_asssociation_record partial with no :object is deprecated", caller(1) unless local_assigns[:form_association_record]
  record = form_association_record ||= @record # TODO: remove me, backwards compatibility, no :collection neither object in render
  @record = record # TODO: remove me, backward compatibility, helpers using @record
  readonly = (record.readonly? or not record.authorized_for?(:crud_type => :update))
  crud_type = record.new_record? ? :create : (readonly ? :read : :update)
  show_actions = false
  locked ||= false
  config = active_scaffold_config_for(record.class)
  scope = column_scope(record_column, scope, record)
  options = active_scaffold_input_options(config.columns[record.class.primary_key], scope, :object => record)
  tr_id = "association-#{options[:id]}"
  if config.subform.layout == :vertical
    record_tag ||= :div
    row_tag ||= :ol
    column_tag ||= :li
    error_tag ||= :div
    error_inner_tag ||= nil
    default_col_class = ['form-element']
    flatten ||= false
  else
    record_tag ||= :tbody
    row_tag ||= :tr
    column_tag ||= :td
    error_tag ||= :tr
    error_inner_tag ||= :td
    default_col_class = []
    flatten ||= false
  end
  index ||= form_association_record_counter ||= nil
  columns_length = 0
  columns_groups = []
-%>
<<%= record_tag %> class="sub-form-record">
<% unless record.errors.empty? -%>
<%= content_tag error_tag, :class => "association-record-errors", :id => element_messages_id(:action => record.class.name.underscore, :id => "#{parent_record.id}-#{index}") do %>
  <% errors = active_scaffold_error_messages_for(:record, :object_name => record.class.model_name.human.downcase) %>
  <%= error_inner_tag ? content_tag(error_inner_tag, errors, :colspan => (active_scaffold_config_for(record.class).subform.columns.length + 1 if error_inner_tag == :td)) : errors %>
<% end %>
<% end %>
<%= content_tag row_tag, :id => tr_id, :class => "association-record#{' association-record-new' if record.new_record?}#{' locked' if locked}" do %>
<% config.subform.columns.each :for => record.class, :crud_type => :read, :flatten => flatten do |column| %>
<%
  if column.respond_to? :each
    columns_groups << column
    next
  end
  next unless in_subform?(column, parent_record)
  columns_length += 1
  show_actions = true
  if column.association && column.form_ui.nil?
    column = column.clone
    column.form_ui ||= :select
  end
  
  col_class = default_col_class.clone
  col_class << 'required' if column.required?
  col_class << column.css_class unless column.css_class.nil? || column.css_class.is_a?(Proc)
  col_class << 'hidden' if column_renders_as(column) == :hidden
-%>
  <%= content_tag column_tag, :class => col_class.join(' ') do %>
    <% if column.association %>
		<% # display only label for associations %>
		<div id="internal-<%= column.name %>-<%= record.id %>">
	    <% if !column.plural_association? %>
			<%= record.send(column.name).to_label if record.send(column.name)  %> 
		<% else %>
			<% if record.persisted? %>
			<% record.send(column.name).each do |row|  %> 
				<input type="checkbox" name="<%= "record[#{record_column.association.name}][#{record.id}][#{column.name}]" %>" checked class="related-checkbox" value="<%= row.id %>"><%= row.to_label %><br>
			<% end %>
			<% end %>
		<% end %>
		</div>
		<%= link_to('Edit', '#', :onclick => "load_internal_search($(this).prev().attr('id'),'#{column.name}', 'record[#{record_column.association.name}][#{record.id}][#{column.name}]', '#{column.name.to_s.humanize}', #{column.plural_association?});return false", :class => 'btn btn-default btn-xs'  )%>
	<% else %>
		<%= active_scaffold_render_subform_column(column, scope, crud_type, readonly, false, record) %>
	<% end %>
  <% end %>
<% end -%>
<% if show_actions -%>
  <%= content_tag column_tag, :class => "actions" do %>
    <% if record_column.plural_association? and (record.authorized_for?(:crud_type => :delete) or not [:destroy, :delete_all].include?(record_column.association.options[:dependent])) %>
      <%= link_to as_(:remove), '#', :class => 'destroy btn btn-default btn-xs', :id => "#{options[:id]}-destroy" , :data => {:delete_id => tr_id} unless locked %>
	  <%= link_to 'Cancel', '#', :onclick => "cancel_edit_#{column.name}_#{record.id}(#{record.id}, '#{column.name}');return false;", :class => 'btn btn-default btn-xs' %>
	  <%= link_to 'Update', '#', :onclick => "update_edit_#{column.name}_#{record.id}(#{record.id}, '#{column.name}',this);return false;", :class => 'btn btn-default btn-xs' %>
    <% end %>
    <% unless record.new_record? %>
      <input type="hidden" name="<%= options[:name] -%>" id="<%= options[:id] -%>" value="<%= record.id -%>" />
    <% end -%>
  <% end %>
<% end -%>
<% end %>

<% columns_groups.each do |column| %>
<%= content_tag row_tag, :class => 'associated-record' do %>
  <%= content_tag column_tag, :colspan => (columns_length if column_tag == :td) do %>
  <% column.each :for => record.class, :crud_type => :read, :flatten => true do |col| %>
    <%= active_scaffold_render_subform_column(col, scope, crud_type, readonly, true, record) %>
  <% end %>
  <% end %>
<% end %>
<% end %>
</<%= record_tag %>>